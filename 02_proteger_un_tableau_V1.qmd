# Protéger un tableau - 1ère partie

Rafraîchissez votre session R en faisant `ctrl+shift+F10`.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(dir.root = getwd())
```


## Objectif:

Protéger un tableau simple en appelant Tau-Argus depuis R pour poser le secret secondaire.

## Consignes:

Vous utiliserez les règles en vigueur à l'Insee pour la diffusion des
tableaux issus des enquêtes entreprises.


Poser un masque de secret sur un tableau comprend les étapes suivantes:  

1. Il s'agit dans un premier temps de poser le secret primaire. Pour cela, il 
s'agit de créer des variables indicatrices, comme dans l'exercice 1:  

  1.1 Pour chacun des tableaux, vous ajouterez une variable booléenne
    indiquant si la cellule est problématique (`TRUE`) ou non (`FALSE`),
    au regard de chacune des règles pertinentes à appliquer:
    
    -   Si vous appliquez la règle de fréquence, la variable créée
    s'appellera `is_secret_freq`;
    -   Si vous appliquez la règle de dominance, la variable créée
    s'appellera `is_secret_dom`.
  1.2 Puis de créer une variable qu'on appellera `is_secret_prim`, définie ainsi:
    -  `is_secret_prim = is_secret_freq` si seule la règle de fréquence doit
    s'appliquer;
    -  `is_secret_prim = is_secret_freq | is_secret_dom` si les deux règles doivent
    s'appliquer;

2.  Après avoir posé le secret primaire, vous calculerez le nombre de cellules
    détectées comme à risque.
    
3. Ensuite, il s'agit de poser le secret secondaire en utilisant le package `rtauargus`. Les consignes d'installation de `rtauargus` et du logiciel Tau-Argus 
sont indiquées dans le fichier [R/00_installations.Rmd](R/00_installations.Rmd).

Vous utiliserez notamment la fonction `tab_rtauargus()` et suivrez les étapes mentionnées pour apprendre à l'utiliser.

4. Enfin, vous calculerez le nombre de cellules selon leur statut final. Nous 
utiliserons pour cela la norme européenne en notant:  

- `A` les cellules en secret primaire à cause de la règle de fréquence
- `B` les cellules en secret primaire à cause de la règle de dominance (dans le futur ces cellules pourraient être notées `O`)
- `D` les cellules concernées par le secret secondaire
- `V` les cellules non touchées par le secret, cad les cellules qui pourront être 
diffusées.


## Contexte

Tous les tableaux fournis ont une structure identique dont l'utilité
sera expliquée plus tard. En plus des variables décrivant les
croisements (variables catégorielles) placées en début, suivent:

-   `FREQ` la variable indiquant le nombre d'unités statistiques
    (entreprises en général dans nos exemples) contribuant à la cellule;
-   `VALUE` la variable indiquant la somme pondérée des valeurs de
    l'ensemble des contributeurs à la cellule (Cela peut être un chiffre
    d'affaires, un nombre de personnes en emploi au 31/12, etc.);
-   `MAX` la valeur du plus gros contributeur à la cellule.

`MAX` et `VALUE` sont nécessairement dans la même unité. Si `VALUE` et
`FREQ` sont identiques, vous êtes en présence d'un tableau d'effectifs.
Dans ce cas, la colonne `MAX` n'a aucune utilité.

## Packages et données

```{r packages}
library(dplyr)
library(rtauargus)
```


```{r data}
load(file="data/data_pour_exo2.RData")
```

## Localisation de Tau-Argus

Si vous êtes sur AUS

```{r loc-tau}
loc_tauargus <- "Y:/Logiciels/TauArgus/TauArgus4.2.3/TauArgus.exe"
options(rtauargus.tauargus_exe = loc_tauargus)
```

Sinon:

```{r eval=FALSE}
loc_tauargus <- "C:/Users/tmm7an/Documents/SDC/TauArgus/TauArgus4.2.3/TauArgus.exe"
options(rtauargus.tauargus_exe = loc_tauargus)
```


## Un exemple

On considère le tableau suivant:

```{r}
T0 <-
  data.frame(
    ACTIVITY = c("01","01","01","02","02","02","06","06","06","Total","Total","Total"),
    SIZE = c("tr1","tr2","Total","tr1","tr2","Total","tr1","tr2","Total","tr1","tr2","Total"),
    VALUE = c(100,50,150,30,20,50,60,40,100,190,110,300),
    FREQ = c(10,5,15,2,5,7,8,6,14,20,16,36),
    MAX = c(20,15,20,20,10,20,16,38,38,20,38,38)
  )
T0
```


### Première étape: poser le secret primaire

```{r}
T0_detect <- T0 %>% 
  mutate(
      is_secret_freq = FREQ > 0 & FREQ < 3,
      is_secret_dom = (VALUE != 0) & (MAX > 0.85*VALUE)
    ) %>% 
  mutate(
    is_secret_prim = is_secret_freq | is_secret_dom
  )
```

### Présence du secret primaire

```{r}
T0_detect %>% count(is_secret_prim)
```

### Poser le secret secondaire avec `tab_rtauargus()`


La fonction `tab_rtauargus()` requiert les arguments suivants :

- `tabular`: la table à protéger
- `dir_name`: le nom du répertoire où  les fichiers seront sauvegardés
- `files_name`: le nom utilisé pour nommer les fichiers (chaque fichier a une extension différente);
- `explanatory_vars`: le nom des variables de croisements présents dans la table;
- `secret_var`: le nom de la variable indiquant si une cellule est à risque ou non (secret primaire);
- `value` = nom de la variable de réponse;
- `freq` = nom de la variable d'effectifs;
- `totcode`: le code utilisé pour indiquer le total pour chacune des variables de croisements (`explanatory_vars`).


```{r}
T0_masq <- tab_rtauargus(
  T0_detect,
  dir_name = "tauargus_files/exo2",
  files_name = "T0",
  explanatory_vars = c("ACTIVITY","SIZE"),
  secret_var = "is_secret_prim",
  value = "VALUE",
  freq = "FREQ",
  totcode = c(ACTIVITY="Total",SIZE="Total"),
  verbose = FALSE
)
```


### Analyse des résultats

#### Les fichiers créés pour ou lors de l'exécution de Tau-Argus:

L'ensemble des fichiers créés pendant le processus se trouvent dans le répertoire
mentionné dans l'argument `dir_name`. Tous les fichiers ont le même nom,
mais pas la même extension:

- `T0.tab` : tableau de données
- `T0.hst` : fichier d'apriori où sont listées les cellules à risque (secret primaire)
- `T0.rda` : fichier de métadonnées;
- `T0.arb` : fichier batch, qui sera exécuté par Tau-Argus
- `T0.txt` : fichier log, retraçant les étapes exécutées par Tau-Argus
- `T0.csv` : masque au format csv

#### Le masque

Le masque est retourné par la fonction. Ce masque est une copie de la table fournie en entrée à laquelle une variable supplémentaire, `Status`, est fournie indiquant 
le statut final de la cellule: 

- `B` : secret primaire (ou apriori)
- `D` : secret secondaire
- `V` : cellule valide, cad qui peut être diffusée

```{r}
str(T0_masq)
```

### Bilan du secret

Pour faire le bilan du secret le mieux est de modifier la variable `Status` 
fournie par Tau-Argus. En effet, cette variable ne permet pas de faire la 
distinction entre l'origine du secret primaire (fréquence ou dominance).

```{r}
T0_masq <- T0_masq %>% 
  mutate(
    statut_final = case_when(
      is_secret_freq ~ "A",
      is_secret_dom ~ "B",
      TRUE ~ Status,
    )
  )
```


Afin de bien appréhender l'impact du secret posé, on va non seulement compter
le nombre de cellules masquées, mais aussi calculer la valeur des cellules masquées.

```{r}
T0_masq %>% 
  group_by(statut_final) %>% 
  summarise(
    n_cell = n(),
    val_cell = sum(VALUE)
  ) %>%
  mutate(
    pc_n_cell = n_cell/sum(n_cell)*100,
    pc_val_cell = val_cell/sum(val_cell)*100
  )
```

=> On masque 1/3 des cellules mais seulement 12% de l'information totale.


## A vous de jouer

Dans les exercices suivants, l'idée est de reproduire la même démarche. Le chargement des packages et la localisation de tau-argus n'ont besoin d'être faits qu'une fois par session.


1.  Le tableau `T1` fournit le nombre d'entreprises produisant des
    salades par secteur d'activité `ACT` et taille des entreprises
    `SIZE`.

```{r str-T1}
str(T1)
```


1.1 Poser le secret primaire = détecter les cellules à risque

`T1` est un tableau d'effectifs donc seule la règle de fréquence s'applique ici.

```{r}
T1_detect <- T1 %>% 
  mutate(
      is_secret_freq = FREQ > 0 & FREQ < 3
    ) %>% 
  mutate(
    is_secret_prim = is_secret_freq
  )
```

1.2 Présence du secret primaire

```{r}
T1_detect %>% count(is_secret_prim)
```


1.3 Pose du secret secondaire

Vous noterez que le code utilisé pour le total dans chacune des variables est "Ensemble".

```{r}
T1_masq <- tab_rtauargus(
  T1_detect,
  dir_name = "tauargus_files/exo2",
  files_name = "T1",
  explanatory_vars = c("ACT","SIZE"),
  secret_var = "is_secret_prim", # on peut aussi mettre directement is_secret_freq
  value = "VALUE",
  freq = "FREQ",
  totcode = c(ACT="Ensemble", SIZE="Ensemble"),
  verbose = FALSE
) %>% 
  mutate(
    statut_final = case_when(
      is_secret_freq ~ "A",
      TRUE ~ Status,
    )
  )
```


1.4 Bilan du secret posé

```{r}
T1_masq  %>% 
  group_by(statut_final) %>% 
  summarise(
    n_cell = n(),
    val_cell = sum(VALUE)
  ) %>%
  mutate(
    pc_n_cell = n_cell/sum(n_cell)*100,
    pc_val_cell = val_cell/sum(val_cell)*100
  )
```

2.  Le tableau `T2` fournit le chiffre d'affaires des entreprises
    produisant des salades, par secteur d'activité `ACT` et taille des
    entreprises `SIZE`.

```{r str-T2}
str(T2)
```


2.1 Poser le secret primaire = détecter les cellules à risque

`T2` est un tableau de volumes, donc les deux règles (fréqunec et dominance) 
s'appliquent.

```{r}
T2_detect <- T2 %>%
  mutate(
    is_secret_freq = FREQ > 0 & FREQ < 3,
    is_secret_dom = (VALUE != 0) & (MAX > 0.85*VALUE)
  ) %>% 
  mutate(
    is_secret_prim = is_secret_freq | is_secret_dom
  )
```

2.2 Présence du secret primaire

```{r}
T2_detect %>% count(is_secret_prim)
```

2.3 Pose du secret secondaire

Vous noterez que le code utilisé pour le total dans chacune des variables est "Ensemble".

```{r}
T2_masq <- tab_rtauargus(
  T2_detect,
  dir_name = "tauargus_files/exo2",
  files_name = "T2",
  explanatory_vars = c("ACT","SIZE"),
  secret_var = "is_secret_prim",
  value = "VALUE",
  freq = "FREQ",
  totcode = c(ACT="Ensemble", SIZE="Ensemble"),
  verbose = FALSE
) %>% 
  mutate(
    statut_final = case_when(
      is_secret_freq ~ "A",
      is_secret_dom ~ "B",
      TRUE ~ Status,
    )
  )
```


2.4 Bilan du secret posé

```{r}
T2_masq  %>% 
  group_by(statut_final) %>% 
  summarise(
    n_cell = n(),
    val_cell = sum(VALUE)
  ) %>%
  mutate(
    pc_n_cell = n_cell/sum(n_cell)*100,
    pc_val_cell = val_cell/sum(val_cell)*100
  )
```

2.5 Le bilan est-il satisfaisant?

Un bon indicateur de la qualité du secret secondaire posé consiste à rapporter 
le nombre de cellules supprimées lors de cette phase au nombre de cellules 
détectées comme à risque (secret primaire). Ici, nous avons un ratio de 
$30/(46+7)$ = `r 30/(46+7)`. Ainsi, pour protéger une case en secret primaire, 
tau-argus a dû masquer 0.6 cellule(s). Ce qui est très peu. En effet, pour 
un tableau à deux dimensions, la présence d'un SP engendre la suppression d'au 
mmoins 3 cellules supplémentaires. 
Ici, le ratio indique ici que nombre de cellules en SP se protègent entre elles.



## Pour aller plus loin


La fonction `tab_rtauargus()` peut être utilisée pour poser secret primaire et 
secret secondaire avec Tau-Argus. L'utilisateur intéressé pourra se reporter 
à la [documentation du package](https://github.com/InseeFrLab/rtauargus/blob/master/vignettes/rtauargus.Rmd).  

Par défaut, la fonction `tab_rtauargus()` utilise un intervalle de protection de 10%.
Cette information est à renseigner dans l'argument `safety_rules`. Il n'est pas 
conseillé de le modifier.



### Exercice Bonus

Poser le secret sur le tableau `T3` en appliquant la démarche proposée ci-dessus 
et les règles appropriées.

Le tableau `T3` fournit le CA en production de salades des entreprises françaises,
ventilé selon l'activité `ACT`, la taille `SIZE` et la catégorie juridique de
l'entreprise `CJ`.

```{r}
T3_detect <- T3 %>%
  mutate(
    is_secret_freq = FREQ > 0 & FREQ < 3,
    is_secret_dom = (VALUE != 0) & (MAX > 0.85*VALUE)
  ) %>% 
  mutate(
    is_secret_prim = is_secret_freq
  )

T3_detect %>% count(is_secret_prim)

T3_masq <- tab_rtauargus(
  T3_detect,
  dir_name = "tauargus_files/exo2",
  files_name = "T3",
  explanatory_vars = c("ACT","SIZE","CJ"),
  secret_var = "is_secret_prim",
  value = "VALUE",
  freq = "FREQ",
  totcode = c(ACT="Ensemble", SIZE="Ensemble", CJ="Ensemble"),
  verbose = FALSE
) %>% 
  mutate(
    statut_final = case_when(
      is_secret_freq ~ "A",
      is_secret_dom ~ "B",
      TRUE ~ Status,
    )
  )

T3_masq  %>% 
  group_by(statut_final) %>% 
  summarise(
    n_cell = n(),
    val_cell = sum(VALUE)
  ) %>%
  mutate(
    pc_n_cell = n_cell/sum(n_cell)*100,
    pc_val_cell = val_cell/sum(val_cell)*100
  )
```

Ratio SSD/SP = `r 197/(187+38)` est là encore très raisonnable.

Un cas typique où de nombreuses cellules sont masquées (44%) mais qui ne 
représentent qu'un très petite partie de l'information (2.5%).



